[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Visual Journey through the Women’s FIFA World Cup",
    "section": "",
    "text": "Introduction\nThe Women’s World Cup in France 2019 saw an exceptional amount of attention, with record levels of viewership, turnout and online engagement across the globe.1 This summer, four years later, the Women’s FIFA World Cup is set to happen again, this time in New Zealand and Australia. As we approach the upcoming Women’s FIFA World cup event, we are motivated and inspired to gain a deeper understanding of various football characteristics surrounding female football.\nDespite the fact that the Women’s World Cup is the largest women’s sporting tournament in the world, the ability to find concise information and digestible visualizations on women’s football is extrememly challenging compared to men’s football. This analysis serves as a catalyst for us to dive deep into the world of women’s football and explore important aspects in a visual manner. Such topics include popular phrases over time, match locations across the globe, demographic information on the top players, winning trends over time, and game statistics on the field.\n\n\nPopular Phrases: Linguistic insight into the FIFA World Cup on Twitter\nIn the past couple of years, Twitter has become an international communication hub for a plethora of topics ranging from international politics to the latest sports news. Twitter’s rise has impacted how official news sources interact with the public, with accounts such as ESPN being able to immediately update fans on the latest scores. Because of this, it was determined that it would be a great source to find text data from three official FIFA news sources as a way to grasp what exactly the FIFA World Cup is. Tweets were pulled from three main accounts, FIFAWorldCup, FIFAWCC (FIFA Women’s World Cup), and FIFAcom. Through Twitter API, tweets were pulled from as close to the past FIFA event as possible. This was done to see what keywords and phrases were being put out by these official accounts to their fans. Through this data collection, it was hoped that the overarching question ‘What exactly is FIFA?’ could be answered.\nAn interactive word cloud was created using Plotly, where the drop-down menu allows the user to specify what account they want to focus on the words, while the slider shows the accounts’ main phrases as the FIFA 2022 World Cup took place. The user would see a lot of key phrases such as Qatar, medal, world, and goal, as well as other phrases to show that this event is truly an international experience. On specific days, the user can see which players are considered key, such as Messi and Mbappe. \n\n\nCode\nimport pandas as pd \nimport json\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\n#function that will create each trace\n#below function was modified from the following link: \n#   https://github.com/PrashantSaikia/Wordcloud-in-Plotly\n#changes were made so multiple wordclouds could be made from frequencies, as well as the location of the words remaining static, as well as color. \ndef plotly_wordcloud(text, word_dict):\n    wc = WordCloud(max_font_size=100).generate_from_frequencies(text) \n    word_list=[]\n    freq_list=[]\n    position_list = []\n    for word_info in wc.layout_:\n        word_list.append(word_info[0][0])\n        freq_list.append(word_info[0][1])\n\n    # get the positions\n    x = []\n    y = []\n    color_list = []\n    #look in the dictonary to get the locations and colors \n    for i in word_list:\n        position = word_dict[i]['position']\n        color_list.append(word_dict[i]['color'])\n        x.append(float(position[0]))\n        y.append(float(position[1]))\n    # get the relative occurence frequencies\n    new_freq_list = [freq*100 for freq in freq_list]\n    trace = go.Scatter(x=x, \n                       y=y, \n                       textfont = dict(size=new_freq_list,\n                                       color=color_list),\n                       textposition =  'middle center',\n                       hoverinfo='text',\n                       hovertext=['{0}{1}'.format(w, f) for w, f in zip(word_list, freq_list)],\n                       mode='text',  \n                       text=word_list, \n                       visible=False\n                      )\n    return trace\n\nvec_df = pd.read_csv(\"../data/FIFAWorldCupvectorized.csv\", index_col=0)\nvec_FIFAcom = pd.read_csv(\"../data/FIFAcomvectorized.csv\", index_col=0)\ndf_vector = pd.read_csv(\"../data/FIFAWCCvectorized.csv\", index_col=0)\n# Load the JSON file\nwith open('../data/dict_1.json') as f:\n    dict_1 = json.load(f)\n# Load the JSON file\nwith open('../data/dict_2.json') as f:\n    dict_2 = json.load(f)\n# Load the JSON file\nwith open('../data/dict_3.json') as f:\n    dict_3 = json.load(f)\n\n#need to generate a trace for each column \ndate_1 = list(vec_df.columns)\ndate_2 = list(vec_FIFAcom.columns)\ndate_3 = list(df_vector.columns)\n\ndataframes = [vec_df, vec_FIFAcom, df_vector]\nwdict_list = [dict_1, dict_2, dict_3]\n\n# initialize the fig \nfig = go.Figure()\nfor i, dataframe in enumerate(dataframes): \n    #creating the traces for the current twitter account: \n    for k in range(len(dataframe.columns)-1): \n        text = dataframe.iloc[:, k]\n        word_dict = wdict_list[i]\n        trace = plotly_wordcloud(text, word_dict)\n        fig.add_trace(trace)\n\n\nfig.data[0].visible = True\nfig.update_layout(template=\"plotly_white\")\nfig.update_layout(xaxis=dict(showline=False, zeroline=False),\n                  yaxis=dict(showline=False, zeroline=False))\n\n\n\nmatrix_false = []\nfor i in range(len(fig.data)):\n    x = [False] * len(fig.data)\n    x[i] = True\n    matrix_false.append(x)\n\n#creating the dictonaries: \ndic_sliders = {}\nstep_count = 0\naccount_dict = [('FIFAWorldCup', len(date_1)-1), ('FIFAcom',len(date_2)-1),('FIFAWWC',len(date_3)-1)]\n\nfor val, j in account_dict:\n    steps = []\n    for k in range(j):\n        step = {'method': 'update',\n        'args': [{'visible': matrix_false[step_count]}]}\n        steps.append(step)\n        step_count += 1\n    dic_sliders[val] = [dict(active=0, currentvalue={\"prefix\": \"Date: \"}, pad={\"t\": 50}, steps=steps)]\n\n\nfig.update_layout(sliders = dic_sliders['FIFAWorldCup']\n         ,xaxis=dict(\n        range=[-1,7],\n        tickvals=[],\n        ticktext=[]\n        ),\n    yaxis=dict(\n        range=[-2, 8],\n        tickvals=[],\n        ticktext=[]\n        )\n)\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    label=\"FIFAWorldCup\",\n                    method=\"update\",\n                    args=[{\"visible\": matrix_false[0]}, {\"sliders\" : dic_sliders['FIFAWorldCup']}] ,\n                ),\n                dict(\n                    label='FIFAcom',\n                    method=\"update\",\n                    args=[{\"visible\": matrix_false[23]}, {\"sliders\" : dic_sliders['FIFAcom']}] ,\n                ), \n                dict(\n                    label= 'FIFAWWC',\n                    method=\"update\",\n                    args=[{\"visible\": matrix_false[57]}, {\"sliders\" : dic_sliders['FIFAWWC']}] ,\n                )\n            ]),\n            direction=\"down\",\n            showactive=True,\n            pad={\"r\": 1, \"t\": 1},\n            x=0,\n            xanchor=\"left\",\n            y=1.2,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.show()\n\n\n\n                                                \n\n\n\n\nLocation: Stadium location analysis for the Women’s 2019 FIFA World Cup Tournament\nWhen it comes to the many diffierent tournaments leading to the FIFA World Cup, there is a certain trend in the location selection for said tournaments. There are three main tournaments that preceeding the FIFA Would Cup, which is considered to be the main event for women’s football. These three tournaments are: - FA Women’s Super League - National Women’s Soccer League (NWSL) - UEFA Women’s Euro\nPreviously, we have seen how did the preception of FIFA World Cup change on social media such as Twitter. With this visualization, we will narrow down the interest to specifically women’s tournaments. We want to be able to see which countries and specific stadiums are prefered for which competitions. This will act as basis for the next step, which is identifying which countries have the largest amount of players with the highest rankings.\nFor this example, we are looking at the period between 2018 and 2022. The most data has been collected for the FA Women’s Super League, showing us the different stadium locations for years 2018, 2019, 2020 and 2021. This can be compared to the National Women’s Soccer League 2018 data, UEFA Women’s Euro 2022 data and of course the FIFA World Cup 2019. Already by the name, we can expect the National Women’s Soccer League to have prefered stadiums in the United States. For tournaments such as the FIFA World Cup, the country that hosts the tournament changes every year. For example, for 2019 the FIFA World Cup was hosted in France, with it’s main stadium being the Parc Olympique Lyonnais, also called the Groupama Stadium in Décines-Charpieu, France.\n\n\nCode\n#IMPORTING LIBRARIES\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport numpy as np\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n\n# Importing data\ndf = pd.read_csv(\"../data/clean_matches.csv\")\n\n# CHANGE DATA TYPE OF YEAR TO STRING SO IT CAN BE ITERABLE\ndf[\"year\"] = df[\"year\"].astype(\"str\")\n\n\ndf1_2018 = pd.DataFrame(df[(df['competition_name'] == 'FA Womens Super League') & (df['year'] == '2018')])\ndf1_2019 = pd.DataFrame(df[(df['competition_name'] == 'FA Womens Super League') & (df['year'] == '2019')])\ndf1_2020 = pd.DataFrame(df[(df['competition_name'] == 'FA Womens Super League') & (df['year'] == '2020')])\ndf1_2021 = pd.DataFrame(df[(df['competition_name'] == 'FA Womens Super League') & (df['year'] == '2021')])\ndf2 = pd.DataFrame(df[df['competition_name']=='NWSL'])\ndf3 = pd.DataFrame(df[df['competition_name']=='UEFA Womens Euro'])\ndf4 = pd.DataFrame(df[df['competition_name']=='Womens World Cup'])\n\n\n\n\n# TRACE-1: \ntrace1 = (  \n    go.Scattergeo(  \n        lat=df1_2018['lat'],\n        lon=df1_2018['long'],\n        text=df1_2018['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='yellow',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"FA Women's Super League 2018\",   \n        visible=True))\n\n# TRACE-2: \ntrace2 = (  \n    go.Scattergeo(  \n        lat=df1_2019['lat'],\n        lon=df1_2019['long'],\n        text=df1_2019['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='green',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"FA Women's Super League 2019\",\n        visible=True))\n\n# TRACE-3: \ntrace3 = (  \n    go.Scattergeo(  \n        lat=df1_2020['lat'],\n        lon=df1_2020['long'],\n        text=df1_2021['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='blue',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"FA Women's Super League 2020\", \n        visible=True))\n\n\n# TRACE-4: \ntrace4 = (  \n    go.Scattergeo(  \n        lat=df1_2021['lat'],\n        lon=df1_2021['long'],\n        text=df1_2021['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='pink',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"FA Women's Super League 2021\",\n        visible=True))\n\n# TRACE-5: \ntrace5 = (  \n    go.Scattergeo(  \n        lat=df2['lat'],\n        lon=df2['long'],\n        text=df2['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='brown',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"National Women's Soccer League 2018\",\n        visible=True))\n\n# TRACE-6: \ntrace6 = (  \n    go.Scattergeo(  \n        lat=df3['lat'],\n        lon=df3['long'],\n        text=df3['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='black',\n            opacity=0.8,\n            symbol='circle'),\n        name = \"UEFA Womens Euro 2022\",\n        visible=True))\n\n# TRACE-7: \ntrace7 = (  \n    go.Scattergeo(  \n        lat=df4['lat'],\n        lon=df4['long'],\n        text=df4['text'],\n        mode='markers',\n        marker=dict(\n            size=10,\n            color='red',\n            opacity=0.8,\n            symbol='circle'), \n        name = 'Womens World Cup 2019',\n        visible=True))\n\ntraces = [trace1, trace2, trace3, trace4, trace5, trace6, trace7]\n\n# INITIALIZE GRAPH OBJECT\nfig = go.Figure(data=traces)\n        \n# VARIABLES FOR BUTTON LOCATION\nbutton_height = 0.15\nx1_loc = 0.00\ny1_loc = 1.18        \n\n#DROPDOWN MENUS\nfig.update_layout(\n    geo1=dict(\n        lonaxis=dict(\n            range=[-130, 20],  \n        ),\n        lataxis=dict(\n            range=[10,70], \n        ),\n    ),\n    updatemenus=[\n        dict(\n            buttons=[\n                dict(\n                    label=\"FA Women's Super League\",           \n                    method=\"update\",                \n                     args=[{\"visible\": [True, True, True, True, False, False, False]}\n                    ]\n                     ),\n                dict(\n                    label=\"National Women's Soccer League 2018\",              \n                    method=\"update\",          \n                     args=[{\"visible\": [False, False, False, False, True, False, False]}\n                         ]\n                     ),\n                dict(\n                    label=\"UEFA Womens Euro 2022\",     \n                    method=\"update\",           \n                     args=[{\"visible\": [False, False, False, False, False, True, False]}\n                         ]\n                     ),    \n                dict(\n                    label=\"Womens World Cup 2019\",               \n                    method=\"update\",          \n                     args=[{\"visible\": [False, False, False, False, False, False, True]}\n                        ]\n                     )           \n            ],\n            direction=\"down\",\n            showactive=True,  \n            pad={\"r\": 10, \"t\": 10},  \n            x=x1_loc, \n            y=y1_loc,\n            xanchor=\"left\",  \n            yanchor=\"top\"\n        )\n    ]\n)\n\n\n# SHOW FIGURE\nfig.show()\n\n\n\n                                                \n\n\nOverall, we can see that the distribution of the stadiums for all of these tournaments is more concentrated in Europe. The one obvious exception, as mentioned earlier, is the National Women’s Soccer League, which has matches strictly in the United states. We can see the the most stadiums are located on the east cost, with also the hifhest number of matches played on the east coast. There is a couple of stadiums also on the west coast and very few in the mid-west and south.\nFor the FA Women’s Super League we can see that a different stadiums were selected for different years, however, all of them are located in the United Kingdom, specifically, England. The marker size represents the number of matches played at the stadium but for each of the tournaments separately. If we were to compare the FA Women’s Super League withe the National Women’s Soccer League, the marker sizes wouldn’t be comparable, since the highest numnber of matches played at any National Women’s Soccer League Stadium is 5, while for the FA Women’s Super League is over 30.\n\n\nLocation: Exploration of geographical dynamics of the 2023 Women’s FIFA World Cup Tournament\nAs the 2023 FIFA Women’s World Cup is fast approaching, let us look into some of the players who might play key roles in the event’s results. Where are the players to watch out for, how are they ranked, what teams are they playing for, and what positions on the field are they playing? We hope to answer these questions and more with the visualization below.\n\n\nCode\nimport warnings\nwarnings.simplefilter('ignore')\n\n# Read in packages\nimport pandas as pd\nimport numpy as np\nimport plotly\nimport requests\nimport plotly.graph_objects as go\nfrom plotly.offline import plot\nimport io\n\n# Read in data\ntop50 = pd.read_csv(\"../data/top50_women_espn.csv\")\n# Convert all columns to strings (used for text later)\ntop50 = top50.astype(str)\n# Change column names\ntop50.columns = [\"name\", \"country\", \"club\", \"age\", \"position\", \"rank\"]\n# Make a country column that consolidates the UK\ndef is_uk(country):\n    if country in [\"Scotland\", \"England\", \"Wales\"]: return \"United Kingdom\"\n    else: return country\ntop50[\"country2\"] = top50[\"country\"].apply(lambda x: is_uk(x))\n\n# Get summary stats per country\ntop50_2 = top50.copy()\n# Make age column an integer\ntop50_2[\"age\"] = top50_2[\"age\"].astype(int)\n# Make rank column an integer and replace not ranked with 0\ndef replace_not_ranked(string):\n    if string == \"Not ranked\": return np.nan\n    else: return int(string)\ntop50_2[\"rank\"] = top50_2[\"rank\"].apply(lambda x: replace_not_ranked(x))\nstats = top50_2.groupby([\"country2\"])[\"age\", \"rank\"].mean().reset_index()\nstats[\"age\"] = stats[\"age\"].round(1)\nstats[\"rank\"] = stats[\"rank\"].round(1).fillna(\"Not Ranked\")\nstats.columns = [\"country\", \"mean_age\", \"mean_rank\"]\n\n# Getting the number of players for each country\ncountry_counts = top50[\"country2\"].value_counts().reset_index()\ncountry_counts.columns = [\"country\", \"count\"]\n# Get country codes\ncodes = [\"GB\", \"ES\", \"US\", \"FR\", \"CA\", \"AU\", \"NL\", \"SE\", \"DE\", \"NO\", \"DK\", \"CL\", \"BR\", \"KR\", \"IT\", \"NG\"]\ncodes2 = [\"GBR\", \"ESP\", \"USA\", \"FRA\", \"CAN\", \"AUS\", \"NDL\", \"SWE\", \"DEU\", \"NOR\", \"DNK\", \"CHL\", \"BRA\", \"KOR\", \"ITA\", \"NGA\"]\n# Merge with count data frame and stats data frame\nmerged_counts = pd.merge(country_counts, stats)\nmerged_counts[\"code\"] = codes\nmerged_counts[\"code2\"] = codes2\nmerged_counts = merged_counts.rename(columns = {\"count\": \"counts\"})\n\n# Adding a text column with player information for each country\nmerged_counts[\"text\"] = \"\"\n# Loop through each country in the country count data\nfor i in range(len(merged_counts)):\n    # Set the current country\n    country = merged_counts.country[i]\n    # Add summary stats for that country\n    merged_counts.text[i] = \"SUMMARY STATS: \" + country.upper()+ \"<br>Number in the Top 50: \" + str(merged_counts.counts[i]) + \"<br>Mean Player Age: \" + str(merged_counts.mean_age[i]) + \"<br>Mean Player Ranking: \" + str(merged_counts.mean_rank[i])\n\n# Make a custom color map\ncolors = [\"#27297F\", \"#404E7E\", \"#405C7E\", \"#406C7E\", \"#40787E\", \"#407E78\", \"#407E6D\", \"#407E5A\", \"#437E40\"]\n\n# Create the choropleth trace\nchoropleth_trace = go.Choropleth(\n    locations = merged_counts[\"code2\"],\n    z = merged_counts[\"counts\"],\n    text = merged_counts[\"text\"],\n    colorscale = colors,\n    autocolorscale = False,\n    reversescale = True,\n    marker_line_color = \"black\",\n    marker_line_width = 0.5,\n    colorbar_title = \"Number of Players <br>in the Top 50\",\n    hovertemplate = \"<b>%{text}</b><br>\",\n    hoverinfo = \"name\",\n)\n# Create the figure\nglobe = go.Figure(data = [choropleth_trace])\nglobe.update_layout(\n    plot_bgcolor = \"#F1F0DA\",\n    paper_bgcolor = \"#F1F0DA\",\n    geo = dict(\n        projection_type = \"orthographic\",\n        showland = True,\n        landcolor = \"#9FC5AA\",\n        oceancolor = \"rgb(152, 190, 217)\",\n        showcountries = True,\n        showlakes = False,\n        showocean = True,\n        countrycolor = \"rgb(30, 56, 38)\",\n        lakecolor = \"rgb(135, 206, 250)\",\n        bgcolor = \"#F1F0DA\"\n    ),\n    title = \"Origin Countries of the Top 50 Players to <br>Watch Out for in the 2023 FIFA Women's World Cup\",\n    title_x = 0.5,\n    width = 800,\n    height = 600, \n    annotations=[\n        dict(\n            x = 0.5,\n            y = -0.05,\n            showarrow = False,\n            text = '<br>Data Source: \"ESPN FC Women\\'s Rank: The 50 best footballers in the world today\"',\n            xref = \"paper\",\n            yref = \"paper\",\n            font = dict(\n                size = 12,\n                color = \"black\"\n            )\n        )\n    ]\n)\n# Show the figure\nglobe.show()\n\n\n\n                                                \n\n\n\n\nWinning Trends Over Time: Analysis of all Women’s FIFA World Cup Tournament team victories\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\nCode\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom raceplotly.plots import barplot\nimport plotly.io as pio\n\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n\n# read in the data\ndf_f = pd.read_csv(\"../data/kaggle_female_matches.csv\")\n# converting date\ndf_f['date']=pd.to_datetime(df_f['date'])\n# adding year\ndf_f['year'] = df_f['date'].dt.year\n# filter date\ndf_f_2019 = df_f[(df_f['year'] < 2020) & (df_f['tournament'] == 'FIFA World Cup')]\n\n# fix tie scores\ndf_f_2019['winner'] = np.where(df_f_2019['home_score'] == df_f_2019['away_score'], 'tie',\n                               np.where(df_f_2019['home_score'] > df_f_2019['away_score'], df_f_2019['home_team'],\n                                        df_f_2019['away_team']))\ndf_f_2019['win_ct'] = 1\ndf_f_2019 = df_f_2019[df_f_2019['winner']!='tie']\n\n# Create pivot table to get all possible combinations of year and winner\npivot_table = pd.pivot_table(df_f_2019,  index=['year'], values='win_ct', aggfunc=sum,columns=['winner'], fill_value=0)\n\n# Reshape the pivot table and reset the index to get the desired output format\noutput_df = pivot_table.stack().reset_index(name='win_ct')\n\n# Create bar race animation\nmy_raceplot = barplot(output_df,  \n                      item_column='winner', \n                      value_column='win_ct', \n                      time_column='year',\n                      #item_color=colors,\n                      top_entries=10)\nmy_raceplot.plot(item_label = 'Top 10 Teams', \n                 value_label = 'Total wins', \n                 frame_duration = 2000,\n                 title='Top World Cup Team Wins Based on Wins (1991-2019)',\n                 time_label='Year:') \n\n#https://prod.liveshare.vsengsaas.visualstudio.com/join?ECC8F154DB9DEA0416B8B38B2DC029CC911A\n\n\n\n                                                \n\n\n\n\nPlayer Attributes: A comparative study of performance metrics\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\nCode\n# Load packages\nimport pandas as pd\nimport altair as alt\nimport numpy as np\nfrom datetime import datetime, time\n\n# Get the data\nstats = pd.read_csv(\"../data/wwc_2019_match_shots.csv\")\ntop50 = pd.read_csv(\"../data/top50_women_espn.csv\")\n\n# Make our custom color scheme\ncolor_scheme = ['#0099FF', '#009643', '#CB4349', '#FF818C', '#FCC92B', '#FD5109', '#CE6DD3','#FA8F38', '#8538B1', '#4983F8', '#A9DDD6', '#A2F17D', '#0C0582', '#960505']\n\n# Make a new minute timestamp column\nstats[\"timestamp_minute\"] = stats[\"minute\"] + stats[\"second\"]/60\nstats[\"timestamp_minute\"] = stats[\"timestamp_minute\"].apply(lambda x: round(x, 2))\n# Rename player column\nstats = stats.rename(columns = {\"player.name\": \"player_name\"})\n# Standardize Alex Morgan name\nstats[\"player_name\"] = stats[\"player_name\"].replace(\"Alexandra Morgan Carrasco\", \"Alex Morgan\")\n# Get the top 50 player names\ntop50_names = list(top50.Name)\n# Filter match data for only the players in top 50\nstats_top50 = stats[stats[\"player_name\"].isin(top50_names)].reset_index(drop = True)\n\n# Add selection fields\nselection = alt.selection_single(fields = [\"player_name\"], name = \"Random\")\n\n## UPPER LEFT BAR CHART - # goals per player\nbar1 = (alt.Chart(stats_top50)\n .mark_bar()\n .encode(y = \"count()\",\n         x = alt.X(\"player_name:N\",\n         sort = alt.EncodingSortField(field = \"timestamp_minute\", op = \"count\", order = \"ascending\"), axis = alt.Axis(labelAngle = 45)),\n         color = alt.condition(selection, alt.Color(\"player_name:N\", scale = alt.Scale(range = color_scheme), title = \"Player Name\"), alt.value(\"lightgray\"))\n).add_selection(selection\n).properties(\n    title = {\"text\": [\"Number Of World Cup Goals For Key Players\", \"Heading Into The 2023 World Cup\"]}, \n    width = 290, \n    height = 130\n))\nbar1.encoding.x.title = \"Player Name\"\nbar1.encoding.y.title = \"Number of World Cup Goals\"\n\n# LOWER LEFT BAR CHART - # mean timestamp of player's goals\nbar2 = (alt.Chart(stats_top50)\n .mark_bar()\n .encode(y = 'mean(timestamp_minute):Q',\n         x = alt.X('player_name:N',\n         sort = alt.EncodingSortField(field = \"timestamp_minute\", op = \"mean\", order = \"ascending\"), axis = alt.Axis(labelAngle = 45)),\n         color = alt.condition(selection, alt.Color(\"player_name:N\", scale = alt.Scale(range = color_scheme), title = \"Player Name\"), alt.value(\"lightgray\"))\n         #color = alt.condition(selection, alt.value(\"#009643\"), alt.value(\"lightgray\")))\n).add_selection(selection\n).properties(\n    title = {\"text\": [\"Average Time These Key Players\", \"Have Scored Their Goals\"]}, \n    width = 290, \n    height = 130\n))\nbar2.encoding.x.title = \"Player Name\"\nbar2.encoding.y.title = \"Mean Time of Goal (min)\"\n\n# Add caption with data source\nbar2 = alt.concat(bar2).properties(title = alt.TitleParams(\n        [\" \", \" \", \"Data Source: ESPN FC Women's Rank 2022 Article and R StatsBomb Data Set\"],\n        baseline = \"bottom\",\n        orient = \"bottom\",\n        anchor = \"end\",\n        fontWeight = \"normal\",\n        fontSize = 12\n    ))\n\n## SCATTER PLOT 1\nscatter1 = (alt.Chart(stats_top50)\n .mark_circle()\n .encode(x = alt.X(\"timestamp_minute:Q\"),\n         y = \"TimeInPoss:Q\",\n         color = alt.condition(selection, alt.Color(\"player_name:N\", scale = alt.Scale(range = color_scheme), title = \"Player Name\"), alt.value(\"lightgray\"))\n  ).properties(\n    title = {\"text\": [\"Possession Time Before Scoring\", \"By Player And Game Minute\"]}, \n    width = 200, \n    height = 120\n))\nscatter1.encoding.x.title = \"Game Minute\"\nscatter1.encoding.y.title = \"Time in Possession (ms)\"\n\n## SCATTER PLOT 2\nscatter2 = (alt.Chart(stats_top50)\n .mark_circle()\n .encode(x = alt.X(\"timestamp_minute:Q\"),\n         y = \"avevelocity:Q\",\n         color = alt.condition(selection, alt.Color(\"player_name:N\", scale=alt.Scale(range = color_scheme)), alt.value(\"lightgray\"))\n).properties(\n    title = {\"text\": [\"Average Velocity Of Ball When\", \"Scoring By Player And Game Minute\"]}, \n    width = 200, \n    height = 120\n))\nscatter2.encoding.x.title = \"Game Minute\"\nscatter2.encoding.y.title = \"Average Ball Velocity (m/s)\"\n\n## SCATTER PLOT 3\nscatter3 = (alt.Chart(stats_top50)\n .mark_circle()\n .encode(x = alt.X(\"timestamp_minute:Q\"),\n         y = \"DistToGoal:Q\",\n         color = alt.condition(selection, alt.Color(\"player_name:N\", scale=alt.Scale(range = color_scheme)), alt.value(\"lightgray\"))\n).properties(\n    title = {\"text\": [\"Distance To Goal When Scoring\", \"By Player And Game Minute\"]}, \n    width = 200, \n    height = 120\n))\nscatter3.encoding.x.title = \"Game Minute\"\nscatter3.encoding.y.title = \"Distance to Goal (m)\"\n\nbar1 & bar2 | scatter1 & scatter2 & scatter3\n\nchart1 = alt.vconcat(bar1 , bar2)\nchart2 = alt.vconcat(scatter1 , scatter2, scatter3)\nalt.hconcat(chart1, chart2, spacing = 5).configure(background = \"#F1F0DA\").configure_title(fontSize = 10)\n\n\n\n\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\nField Stats: An overview of shots and outcomes during matches\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\nCode\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns\n \n# read in the data\nshots = pd.read_csv(\"../data/shots.csv\")\nnet_shots = pd.read_csv(\"../data/net_shots.csv\")\n\n# subset the data\nus_shots = shots[['location.x','location.y','shot.outcome.name']]\nnet_shots = net_shots[['location.x','location.y','shot.outcome.name']]\n\n# subtract the x-coordinates from the maximum x-coordinate value to get mirror image on field\nnet_shots['location.x'] = 120 - net_shots['location.x']\n\n# join two dataframes\ndata_merge = pd.concat([us_shots,net_shots],axis=0) \n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(8,6))\n\n# Add the rectangles\nax.add_patch(Rectangle((0, 0), 120, 80, facecolor='darkgreen', edgecolor='white', linewidth=0.5))\nax.add_patch(Rectangle((0, 0), 60, 80, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((0, 18), 18, 44, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((102, 18), 18, 44, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((0, 30), 6, 20, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((114, 30), 6, 20, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((0, 36), 0.5, 8, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\nax.add_patch(Rectangle((120, 36), -0.5, 8, facecolor='darkgreen', edgecolor='white', linewidth=0.6))\n\n\n# Remove background elements\nax.axis('off')\n\n# # Add points and paths\nax.scatter(108,40, color='white', s=12.6) # penalty point (right)\nax.plot(60+10*np.cos(np.linspace(0, 2*np.pi, 2000)), 40+10*np.sin(np.linspace(0, 2*np.pi, 2000)), color='white', linewidth=0.6)\nax.set_aspect('equal', adjustable='box') # create equal circle\nax.scatter(60,40, color='white', s=12.6) # center point\nax.plot(12+10*np.cos(np.linspace(-0.3*np.pi, 0.3*np.pi, 30)), 40+10*np.sin(np.linspace(-0.3*np.pi, 0.3*np.pi, 30)), color='white', linewidth=0.6) # penalty arc\nax.plot(107.84-10*np.cos(np.linspace(-0.3*np.pi, 0.3*np.pi, 30)), 40-10*np.sin(np.linspace(-0.3*np.pi, 0.3*np.pi, 30)), color='white', linewidth=0.6)\n\n# Create the scatterplot using seaborn\nsns.scatterplot(data=data_merge, x='location.x', y='location.y', hue='shot.outcome.name', s=72, alpha=0.8, ax=ax)\n\n# Show the legend\nax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n# Add titles\n#ax.set_title('Soccer Shot Locations and Outcomes on Field')\nplt.text(0.5, 1.10, 'Shot Locations and Outcomes', ha='center', va='center', transform=ax.transAxes, fontsize=16)\nplt.text(0.5, 1.02, \"Women's World Cup 2019 - USA vs Netherlands\", ha='center', va='center', transform=ax.transAxes, fontsize=12)\nplt.text(0.1, -0.05, 'Netherlands Team', ha='left', va='center', transform=ax.transAxes, fontsize=12)\nplt.text(0.9, -0.05, 'United States Team', ha='right', va='center', transform=ax.transAxes, fontsize=12)\n\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\nConclusions\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\nAppendix\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Eget lorem dolor sed viverra. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Vel pharetra vel turpis nunc eget lorem dolor. Consectetur adipiscing elit duis tristique sollicitudin nibh. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Felis bibendum ut tristique et egestas quis. Pulvinar sapien et ligula ullamcorper malesuada proin. Libero nunc consequat interdum varius sit. Amet purus gravida quis blandit turpis cursus in hac habitasse. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Purus sit amet luctus venenatis lectus magna fringilla. Eget nullam non nisi est sit. Lacus sed turpis tincidunt id aliquet risus feugiat in. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Tincidunt eget nullam non nisi est sit amet facilisis. Rhoncus urna neque viverra justo nec ultrices. Quis risus sed vulputate odio.\nQuis auctor elit sed vulputate mi sit amet mauris. Feugiat pretium nibh ipsum consequat nisl vel. Ornare massa eget egestas purus viverra accumsan in. Vitae elementum curabitur vitae nunc sed velit dignissim sodales ut. Purus in mollis nunc sed id. Libero justo laoreet sit amet. Vitae tempus quam pellentesque nec nam aliquam sem et tortor. Lorem ipsum dolor sit amet consectetur adipiscing elit ut aliquam. Auctor elit sed vulputate mi sit amet mauris commodo. Sit amet aliquam id diam maecenas ultricies. Tellus mauris a diam maecenas sed enim ut sem viverra. Magna fringilla urna porttitor rhoncus dolor. Malesuada fames ac turpis egestas integer eget. In fermentum et sollicitudin ac. Lacus sed viverra tellus in hac habitasse platea dictumst vestibulum.\n\n\n\n\n\nFootnotes\n\n\nWenger, Arsène, et al. PHYSICAL ANALYSIS of the FIFA WOMEN’S WORLD CUP FRANCE 2019TM.↩︎"
  }
]